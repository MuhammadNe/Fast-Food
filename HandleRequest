from google.appengine.ext.webapp import template
import webapp2
import json
from Restaurants import Restaurants

class NewRestaurants(webapp2.RequestHandler):
    def get(self):
        name = self.request.get('Name')
        address = self.request.get('Address')
        lng=self.request.get('lng')
        lat=self.request.get('lat')
        if not Name:
            self.error(403)
            self.response.write('Empty Name submitted')
            return

        if not Address:
            self.error(403)
            self.response.write('Empty Address submitted')
            return
                
        name = User.query(Restaurants.Name == Name).get()
        if name:
            self.error(402)
            self.response.write('restaurants exist')
            return
                        
        resta = Restaurants()
        resta.name = name
        resta.address=address
        resta.lng=lng
        resta.lat=lat
        resta.put()
        self.response.write(json.dumps({'status':'OK'}))
        

class ResauratntsList_WithRespectTo(webapp2.RequestHandler):
    def get(self):
        longitude=self.request.get('lng') #current location
        latitude=self.request.get('lat') #current location
        distance=self.request.get('distance')# radius search
        user = Restaurants.query(distance_on_unit_sphere(longitude,latitude,User.longitude,User.latitude)<=distance).get()

        if not user :
            self.error(403)
            self.response.write('No availible Restaurants')
            return
                
        self.response.write(json.dumps({'status':'OK'}))
                #relevant to Search function
    def distance_on_unit_sphere(lat1, long1, lat2, long2):
 
        # Convert latitude and longitude to 
        # spherical coordinates in radians.
        degrees_to_radians = math.pi/180.0
         
        # phi = 90 - latitude
        phi1 = (90.0 - lat1)*degrees_to_radians
        phi2 = (90.0 - lat2)*degrees_to_radians
         
        # theta = longitude
        theta1 = long1*degrees_to_radians
        theta2 = long2*degrees_to_radians
         
        # Compute spherical distance from spherical coordinates.
         
        # For two locations in spherical coordinates 
        # (1, theta, phi) and (1, theta, phi)
        # cosine( arc length ) = 
        #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'
        # distance = rho * arc length
     
        cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + math.cos(phi1)*math.cos(phi2))
           
        arc = math.acos( cos )
 
        # Remember to multiply arc by the radius of the earth 
        # in your favorite set of units to get length.
        return arc            
